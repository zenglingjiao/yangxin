<?php

namespace Modules\Common\Exceptions;

use BadMethodCallException;
use Error;
use Illuminate\Database\Eloquent\ModelNotFoundException;
use Illuminate\Database\QueryException;
use Illuminate\Foundation\Exceptions\Handler as ExceptionHandler;
use Illuminate\Validation\ValidationException;
use ParseError;
use Spatie\Permission\Exceptions\UnauthorizedException;
use Throwable;

class Handler extends ExceptionHandler
{
    private $status = 0;
    private $message = '';
    /**
     * A list of the exception types that are not reported.
     *
     * @var array
     */
    protected $dontReport = [
        //
    ];

    /**
     * A list of the inputs that are never flashed for validation exceptions.
     *
     * @var array
     */
    protected $dontFlash = [
        'password',
        'password_confirmation',
    ];

    /**
     * Register the exception handling callbacks for the application.
     *
     * @return void
     */
    public function register()
    {
        $this->reportable(function (Throwable $e) {
            //
        });
    }

    /**
     * @Name 定義異常狀態
     * @Description
     * @Author 非比網絡
     * @Date 2021/6/6 23:11
     * @param $e
     */
    private function setErrorException($e){

        if($e instanceof BadMethodCallException){
            $this->status = StatusData::BAD_METHOD_CALL_EXCEPTION;
            $this->message = __('exceptions.Error');
        }else if($e instanceof Error){
            $this->status = StatusData::Error;
            $this->message = __('exceptions.Error');
        }else if($e instanceof ParseError){
            $this->status = StatusData::PARES_ERROR;
            $this->message = __('exceptions.PARES_ERROR');
        }else if($e instanceof \ReflectionException){
            $this->status = StatusData::REFLECTION_EXCEPTION;
            $this->message = __('exceptions.REFLECTION_EXCEPTION');
        }else if($e instanceof \RuntimeException){
            $this->status = StatusData::RUNTIME_EXCEPTION;
            $this->message = __('exceptions.RUNTIME_EXCEPTION');
        }else if($e instanceof \ErrorException){
            $this->status = StatusData::ERROR_EXCEPTION;
            $this->message = __('exceptions.ERROR_EXCEPTION');
        }else if($e instanceof \InvalidArgumentException){
            $this->status = StatusData::INVALID_ARGUMENT_EXCEPTION;
            $this->message = __('exceptions.INVALID_ARGUMENT_EXCEPTION');
        }else if($e instanceof ModelNotFoundException){
            $this->status = StatusData::MODEL_NOT_FOUND_EXCEPTION;
            $this->message = __('exceptions.MODEL_NOT_FOUND_EXCEPTION');
        }else if($e instanceof QueryException){
            $this->status = StatusData::QUERY_EXCEPTION;
            $this->message = __('exceptions.QUERY_EXCEPTION');
        }
    }

    public function render($request, Throwable $e)
    {
        if ($request->is("admin/*")) {
            if ($e instanceof AdminException) {
                $result = [
                    "status" => $e->getCode(),
                    "message" => $e->getMessage(),
                ];
                return response()->json($result,CodeData::INTERNAL_SERVER_ERROR);
            }else if($e instanceof ValidationException){
                $result = [
                    "status"=>StatusData::BAD_REQUEST,
                    "message"=>array_values($e->errors())[0][0]
                ];
                return response()->json($result,CodeData::OK);
            }else if($e instanceof UnauthorizedException)
            {
                $result = [
                    "status"=>StatusData::BAD_REQUEST,
                    "message"=>__('exceptions.NO_PERMISSION')
                ];
                return response()->json($result,CodeData::OK);
            }
            if(!env("ADMIN_DEBUG")){
                $this->setErrorException($e);
                if($this->status){
                    $data = [
                        "file"=>$e->getFile(),
                        "line"=>$e->getLine(),
                        "trace"=>$e->getTrace()
                    ];
                    if($this->status == StatusData::MODEL_NOT_FOUND_EXCEPTION){
                        $data['message'] = $e->getModel();
                    }else{
                        $data['message'] = $e->getMessage();
                    }
                    return response()->json([
                        "status" => $this->status,
                        "message" => env("ADMIN_DEBUG")?$this->message:__('exceptions.COMMON_EXCEPTION'),
                        "data"=>$data,
                    ],CodeData::INTERNAL_SERVER_ERROR);exit();
                }
            }
        }
        return parent::render($request, $e); // TODO: Change the autogenerated stub
    }
}
